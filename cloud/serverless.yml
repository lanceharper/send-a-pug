# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: jerk-service # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  modules:
    - serverless-cf-vars
    - serverless-appsync-plugin
    # - aws-amplify-serverless-plugin

provider:
  name: aws
  runtime: nodejs8.10
  region: ${opt:region, "us-west-2"}
  stage: ${opt:stage, "dev"}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cognito-idp:AdminCreateUser"
        - "cognito-idp:AdminInitiateAuth"
        - "cognito-idp:AdminRespondToAuthChallenge"
        - "cognito-idp:AdminGetUser"
        - "cognito-idp:AdminUpdateUserAttributes"
      Resource: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] }
custom:
  api: ${self:provider.stage}-jerk
  # AWS Amplify configuration
  # amplify:
  #   - filename: ./tilted-web/src/amplify/aws-exports.js
  #     type: javascript
  #     appClient: WebUserPoolClient
  appSync:
    name: ${self:custom.api}
    authenticationType: API_KEY
    schema: ../shared/schema.graphql
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] }
      level: ALL
    mappingTemplates:
      - dataSource: none
        type: Mutation
        field: createJerk
        request: "jerks-request-mapping-template.vtl"
        response: "jerks-response-mapping-template.vtl"
    dataSources:
      - type: NONE
        name: none

resources:
  Resources:
    AppSyncLoggingServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.api}-AppSyncLoggingServiceRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: "appsync.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: CloudWatchLogsAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Effect: Allow
                  Resource:
                    - "arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:*"

    CognitoUserPoolUsers:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.api}
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        # Schema:
        # - Name: email
        #   Required: true
        #   Mutable: true
        # - Name: pet
        #   Required: false
        #   Mutable: false
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireUppercase: false
            RequireNumbers: false
            RequireSymbols: false
        MfaConfiguration: OFF

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.api}-web
        GenerateSecret: false
        UserPoolId: { Ref: CognitoUserPoolUsers }

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    environment:
      JERK_TWITCH_SECRET: ${ssm:jerkTwitchSecret}
    events:
      - http:
          path: users/twitch-auth
          method: post
          cors: true
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
